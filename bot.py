import os
import asyncio
import sqlite3
import threading
import queue
from queue import Queue
import time
from datetime import datetime
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler
from groq import Groq
from utils.rss_parser import parse_rss
from utils.image_gen import generate_image
import logging
from PIL import Image, ImageDraw, ImageFont
import io
import requests
import signal
import random
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class NewsBot:
    def __init__(self):
        self.shutdown_event = threading.Event()
        self.db_queue = Queue()
        self._init_db_worker()
        self._check_env()
        self._init_clients()
        self._test_rss_feeds()
        self._init_processed_urls_db()
        self.fallback_image = self._load_fallback_image()
        
        signal.signal(signal.SIGINT, self._handle_signal)
        signal.signal(signal.SIGTERM, self._handle_signal)

    def _handle_signal(self, signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.shutdown_event.set()

    def _load_fallback_image(self) -> Optional[bytes]:
        try:
            fallback_path = os.path.join("assets", "fallback.png")
            if os.path.exists(fallback_path):
                with open(fallback_path, "rb") as f:
                    return f.read()
            logger.warning("–§–∞–π–ª fallback.png –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ assets")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return None

    def _init_db_worker(self):
        def db_worker():
            conn = sqlite3.connect('posts.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS posts
                           (id TEXT PRIMARY KEY,
                            text TEXT,
                            image_path TEXT,
                            status TEXT,
                            source TEXT,
                            url TEXT UNIQUE,
                            created_at TEXT)''')
            cursor.execute('''CREATE TABLE IF NOT EXISTS processed_urls
                           (url TEXT PRIMARY KEY,
                            processed_at TEXT)''')
            conn.commit()
            
            while not self.shutdown_event.is_set():
                try:
                    task = self.db_queue.get(timeout=1)
                    if task[0] == 'save_post':
                        _, post_id, text, image_bytes, source, url = task
                        image_path = None
                        if image_bytes:
                            os.makedirs("images", exist_ok=True)
                            image_path = f"images/{post_id}.png"
                            with open(image_path, 'wb') as f:
                                f.write(image_bytes)
                        
                        cursor.execute(
                            "INSERT OR IGNORE INTO posts VALUES (?, ?, ?, ?, ?, ?, ?)",
                            (post_id, text, image_path, 'pending', source, url, datetime.now().isoformat())
                        )
                        conn.commit()
                    
                    elif task[0] == 'update_status':
                        _, post_id, status = task
                        cursor.execute(
                            "UPDATE posts SET status=? WHERE id=?",
                            (status, post_id)
                        )
                        conn.commit()

                except queue.Empty:
                    pass
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ –ë–î: {str(e)}")

            conn.close()
            logger.info("–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –ë–î –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        self.db_thread = threading.Thread(target=db_worker, daemon=True)
        self.db_thread.start()

    def _init_processed_urls_db(self):
        conn = sqlite3.connect('posts.db')
        conn.close()

    def _check_env(self):
        required_vars = ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_ADMIN_CHAT_ID', 
                        'TELEGRAM_CHANNEL_ID', 'GROQ_API_KEY', 'STABILITY_API_KEY']
        for var in required_vars:
            if not os.getenv(var):
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var}")

    def _init_clients(self):
        self.groq = Groq(api_key=os.getenv("GROQ_API_KEY"))
        self.bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
        
        try:
            test_image = generate_image("test connection")
            if test_image:
                logger.info("Stability API –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("Stability API –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Stability API: {str(e)}")

    def _test_rss_feeds(self):
        rss_urls = [
            "https://www.technologyreview.com/topic/artificial-intelligence/feed/",
            "https://export.arxiv.org/rss/cs.AI",
            "https://rsshub.app/deepmind/blog",
            "https://venturebeat.com/category/ai/feed/",
            "https://www.theverge.com/rss/ai/index.xml",
            "https://syncedreview.com/tag/artificial-intelligence/feed/",
            "https://hnrss.org/newest?q=AI+OR+LLM+OR+GPT",
            "https://lobste.rs/t/ai.rss"
        ]
        
        logger.info("=== –ü–†–û–í–ï–†–ö–ê RSS-–õ–ï–ù–¢ ===")
        working_feeds = 0
        
        for url in rss_urls:
            try:
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    logger.info(f"‚úì –†–∞–±–æ—á–∏–π RSS: {url}")
                    working_feeds += 1
                else:
                    logger.warning(f"‚úó –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {response.status_code}): {url}")
            except Exception as e:
                logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {url}: {str(e)}")
        
        logger.info(f"–ò—Ç–æ–≥–æ: {working_feeds}/{len(rss_urls)} —Ä–∞–±–æ—á–∏—Ö RSS-–ª–µ–Ω—Ç")

    def _add_watermark(self, image_bytes: bytes) -> bytes:
        try:
            img = Image.open(io.BytesIO(image_bytes)).convert('RGBA')
            width, height = img.size
            
            watermark = Image.new('RGBA', img.size, (0, 0, 0, 0))
            draw = ImageDraw.Draw(watermark)
            
            font_size = max(int(width * 0.03), 14)
            
            try:
                font = ImageFont.truetype("arial.ttf", font_size)
            except:
                font = ImageFont.load_default()
                font.size = font_size
            
            watermark_text = "@ai_revo"
            text_width = draw.textlength(watermark_text, font=font)
            
            x = width - text_width - 10
            y = height - font_size - 10
            
            draw.rectangle(
                [x - 5, y - 2, x + text_width + 5, y + font_size + 2],
                fill=(0, 0, 0, 120))
            
            draw.text((x, y), watermark_text, font=font, fill=(255, 255, 255, 220))
            
            watermarked = Image.alpha_composite(img, watermark)
            
            output = io.BytesIO()
            watermarked.save(output, format='PNG')
            return output.getvalue()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {str(e)}")
            return image_bytes

    async def generate_news_text(self, title: str, description: str) -> str:
        try:
            response = self.groq.chat.completions.create(
                model="llama3-70b-8192",
                messages=[{
                    "role": "system",
                    "content": """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç, –ø–∏—à–µ—à—å –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ @ai_revo –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ.
‚ö° –ü–∏—à–∏ **–∫–æ—Ä–æ—Ç–∫–æ, —è—Å–Ω–æ, –ø–æ –¥–µ–ª—É**. **–ë–µ–∑ –≤–æ–¥—ã**, —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–µ.  
üéØ –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ Telegram-—Ñ–æ—Ä–º–∞—Ç ‚Äî –µ–º–∫–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –¥–µ—Ç–∞–ª–µ–π.  

–°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:  
1. **–ó–∞–≥–æ–ª–æ–≤–æ–∫** (–ø–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π):  
   - üìå <b>–ö—Ä–∞—Ç–∫–∏–π, —Ü–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏</b>  
   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ 8-10 —Å–ª–æ–≤.  
2. **–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç**:  
   - üîç –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).  
   - üìå –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (3-5 –ø—É–Ω–∫—Ç–æ–≤, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π).  
   - üí° –ò—Ç–æ–≥: –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?  
3. **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ**:  
   - **–ü–µ—Ä–µ–≤–æ–¥–∏** –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ **—Ä—É—Å—Å–∫–∏–π**!  
   - –ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>.  
   - –≠–º–æ–¥–∑–∏ ‚Äî –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ (–Ω–æ **–Ω–µ –±–æ–ª–µ–µ 5** –Ω–∞ –ø–æ—Å—Ç).  
   - –ê–±–∑–∞—Ü—ã **–∫–æ—Ä–æ—Ç–∫–∏–µ** (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).  
4. **–ö–æ–Ω–µ—Ü –ø–æ—Å—Ç–∞**:  
   - üåê –ò—Å—Ç–æ—á–Ω–∏–∫: <a href="URL">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞</a>.  
   - üîî <b>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @ai_revo</b> ‚Äî —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–± –ò–ò!  
"""
                }, {
                    "role": "user",
                    "content": f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n\n–¢–µ–∫—Å—Ç: {description}"
                }],
                temperature=0.5,
                max_tokens=1000,
                top_p=0.9
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏: {str(e)}")
            return f"üìå <b>{title}</b>\n\n{description}\n\nüîî <b>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @ai_revo</b>"

    def _generate_safe_image_prompt(self, title: str) -> str:
        banned_words = ["nude", "sexy", "violence", "blood", "war", "kill", 
                       "attack", "weapon", "gun", "assault", "porn", "nsfw"]
        
        clean_title = title.lower()
        for word in banned_words:
            clean_title = clean_title.replace(word, "")
        
        base_prompt = (
            "Abstract technology concept, digital art, futuristic style, "
            "blue and purple color scheme, corporate safe, no people, "
            "no violence, professional illustration, safe for work"
        )
        
        return f"{clean_title[:150]}, {base_prompt}"

    async def _generate_and_process_image(self, title: str) -> Optional[bytes]:
        try:
            image_prompt = self._generate_safe_image_prompt(title)
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: {title[:50]}...")
            
            image_bytes = generate_image(image_prompt)
            
            if image_bytes:
                image_bytes = self._add_watermark(image_bytes)
                logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                return image_bytes
            
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self.fallback_image
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return self.fallback_image

    async def process_news(self):
        try:
            logger.info("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ù–û–í–û–°–¢–ï–ô ===")
            urls = [
                "https://www.technologyreview.com/topic/artificial-intelligence/feed/",
                "https://export.arxiv.org/rss/cs.AI",
                "https://rsshub.app/deepmind/blog",
                "https://venturebeat.com/category/ai/feed/",
                "https://www.theverge.com/rss/ai/index.xml",
                "https://syncedreview.com/tag/artificial-intelligence/feed/",
                "https://hnrss.org/newest?q=AI+OR+LLM+OR+GPT",
                "https://lobste.rs/t/ai.rss"
            ]
            
            entries = parse_rss(urls)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(entries)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(urls)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

            conn = sqlite3.connect('posts.db')
            cursor = conn.cursor()
            cursor.execute("SELECT url FROM processed_urls")
            processed_urls = {row[0] for row in cursor.fetchall()}
            
            new_entries = [entry for entry in entries if entry.get('url') not in processed_urls]
            logger.info(f"–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(new_entries)}")

            for i, entry in enumerate(new_entries, 1):
                if self.shutdown_event.is_set():
                    break
                    
                try:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(new_entries)}: {entry.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')}")
                    
                    if not entry.get('url'):
                        logger.warning("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ URL")
                        continue
                    
                    cursor.execute(
                        "INSERT OR IGNORE INTO processed_urls VALUES (?, ?)",
                        (entry['url'], datetime.now().isoformat())
                    )
                    conn.commit()
                    
                    post_text = await self.generate_news_text(
                        entry.get('title', ''), 
                        entry.get('description', '')
                    )
                    
                    image_bytes = await self._generate_and_process_image(entry.get('title', ''))
                    
                    await self._send_for_moderation(
                        text=post_text,
                        image_bytes=image_bytes,
                        source=entry.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'),
                        url=entry.get('url')
                    )
                    
                    await asyncio.sleep(15)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {str(e)}")
                    await asyncio.sleep(30)
            
            conn.close()
            logger.info("=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –ù–û–í–û–°–¢–ï–ô ===")
            
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    async def _send_for_moderation(self, text: str, image_bytes: bytes = None, 
                             source: str = None, url: str = None):
        post_id = f"post-{int(time.time())}-{hash(text) % 10000}"
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve:{post_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{post_id}")
        ]])
        
        caption = f"{text}"
        
        try:
            if image_bytes:
                await self.bot.send_photo(
                    chat_id=os.getenv("TELEGRAM_ADMIN_CHAT_ID"),
                    photo=image_bytes,
                    caption=caption[:1024],
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await self.bot.send_message(
                    chat_id=os.getenv("TELEGRAM_ADMIN_CHAT_ID"),
                    text=caption,
                    reply_markup=keyboard,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
            
            self.db_queue.put(('save_post', post_id, text, image_bytes, source, url))
            logger.info(f"–ü–æ—Å—Ç {post_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {str(e)}")

    async def handle_button(self, update, context):
        query = update.callback_query
        await query.answer()
        
        try:
            action, post_id = query.data.split(':', 1)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {action} –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
            
            if action == 'approve':
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                self.db_queue.put(('update_status', post_id, 'published'))
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î
                conn = sqlite3.connect('posts.db')
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT text, image_path, source, url FROM posts WHERE id=?",
                    (post_id,)
                )
                post = cursor.fetchone()
                conn.close()
                
                if post:
                    text, image_path, source, url = post
                    caption = f"{source}\n\n{text}\n\n{url}" if url else f"{source}\n\n{text}"
                    
                    try:
                        if image_path and os.path.exists(image_path):
                            with open(image_path, 'rb') as f:
                                await self.bot.send_photo(
                                    chat_id=os.getenv("TELEGRAM_CHANNEL_ID"),
                                    photo=f,
                                    caption=caption[:1000],
                                    parse_mode='HTML'
                                )
                        else:
                            await self.bot.send_message(
                                chat_id=os.getenv("TELEGRAM_CHANNEL_ID"),
                                text=caption,
                                parse_mode='HTML',
                                disable_web_page_preview=True
                            )
                        
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        try:
                            if hasattr(query.message, 'caption'):
                                new_text = f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ\n\n{query.message.caption}"
                                await query.edit_message_caption(
                                    caption=new_text[:1024],
                                    reply_markup=None
                                )
                            else:
                                new_text = f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ\n\n{query.message.text}"
                                await query.edit_message_text(
                                    text=new_text,
                                    reply_markup=None,
                                    parse_mode='HTML',
                                    disable_web_page_preview=True
                                )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {str(e)}")
                        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
                else:
                    await query.answer("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            
            elif action == 'reject':
                try:
                    if hasattr(query.message, 'caption'):
                        new_text = f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n\n{query.message.caption}"
                        await query.edit_message_caption(
                            caption=new_text[:1024],
                            reply_markup=None
                        )
                    else:
                        new_text = f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n\n{query.message.text}"
                        await query.edit_message_text(
                            text=new_text,
                            reply_markup=None,
                            parse_mode='HTML',
                            disable_web_page_preview=True
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {str(e)}")
            await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"""
        try:
            CHECK_INTERVAL = 60 * 60 * 2  # 2 —á–∞—Å–∞
            
            async def news_loop():
                while not self.shutdown_event.is_set():
                    try:
                        start_time = time.time()
                        logger.info("=== –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ù–û–í–û–°–¢–ï–ô ===")
                        
                        await self.process_news()
                        
                        elapsed = time.time() - start_time
                        sleep_time = max(CHECK_INTERVAL - elapsed, 0)
                        logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {sleep_time/60:.1f} –º–∏–Ω—É—Ç")
                        
                        await asyncio.sleep(sleep_time)
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
                        await asyncio.sleep(60)
                
                logger.info("–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            application = Application.builder() \
                .token(os.getenv("TELEGRAM_BOT_TOKEN")) \
                .build()
            
            application.add_handler(CallbackQueryHandler(self.handle_button))
            
            async def main():
                news_task = asyncio.create_task(news_loop())
                await application.initialize()
                await application.start()
                await application.updater.start_polling()
                
                while not self.shutdown_event.is_set():
                    await asyncio.sleep(1)
                
                await application.stop()
                await application.shutdown()
                news_task.cancel()
            
            try:
                loop.run_until_complete(main())
            except (asyncio.CancelledError, KeyboardInterrupt):
                pass
            finally:
                loop.close()
            
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")

if __name__ == "__main__":
    bot = NewsBot()
    bot.run()